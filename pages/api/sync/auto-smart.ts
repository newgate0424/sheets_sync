import { NextApiRequest, NextApiResponse } from 'next';
import realTimeSync from '../../../lib/realTimeSync';
import { mockSmartAutoPilot } from '../../../lib/mockData';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      const stats = realTimeSync.getSmartSyncStats();
      
      res.status(200).json({
        success: true,
        message: 'Auto Smart Sync status retrieved successfully',
        data: {
          ...stats,
          status: stats.smartSyncEnabled ? 'üß† SMART AUTO-PILOT' : 'üìä STANDARD AUTO-PILOT',
          description: stats.smartSyncEnabled 
            ? 'Smart Delta Sync ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö auto - ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ 70-80%'
            : 'Standard incremental sync ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö auto - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }
      });
    } catch (error) {
      console.error('Error getting auto smart sync status, using mock data:', error);
      res.status(200).json({
        success: true,
        message: 'Using mock data for Smart Auto-Pilot',
        data: mockSmartAutoPilot
      });
    }
  } else if (req.method === 'POST') {
    try {
      const { action } = req.body;

      if (action === 'enable') {
        realTimeSync.enableSmartSync();
        res.status(200).json({
          success: true,
          message: 'üöÄ Auto Smart Delta Sync ENABLED! ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
          data: {
            smartSyncEnabled: true,
            effect: '‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ 70-80%, ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á',
            autoMode: 'Smart Delta Sync ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'
          }
        });
      } else if (action === 'disable') {
        realTimeSync.disableSmartSync();
        res.status(200).json({
          success: true,
          message: 'üìä Switched to Standard Auto Sync - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          data: {
            smartSyncEnabled: false,
            effect: '‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ñ‡∏≤‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô',
            autoMode: 'Standard incremental sync ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'
          }
        });
      } else if (action === 'restart') {
        // Restart ‡∏£‡∏∞‡∏ö‡∏ö real-time sync
        console.log('Restarting Auto Smart Sync system...');
        await realTimeSync.initialize();
        res.status(200).json({
          success: true,
          message: 'üîÑ Auto Smart Sync system restarted successfully!',
          data: realTimeSync.getSmartSyncStats()
        });
      } else {
        res.status(400).json({
          success: false,
          error: 'Invalid action. Use "enable", "disable", or "restart"'
        });
      }
    } catch (error) {
      console.error('Error controlling auto smart sync:', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  } else {
    res.setHeader('Allow', ['GET', 'POST']);
    res.status(405).json({ success: false, error: 'Method not allowed' });
  }
}
